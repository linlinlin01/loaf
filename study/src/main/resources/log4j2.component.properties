#log4j2 开启全异步日志
#创建 LoggerContext。根据情况，一个应用程序可以有一个或多个活动的 LoggerContext。有关详细信息，请参阅日志分离。可用的上下文选择器实现类：
#Creates the LoggerContexts. An application can have one or more active LoggerContexts depending on the circumstances. See Log Separation for more details. Available context selector implementation classes:
#org.apache.logging.log4j.core.async .BasicAsyncLoggerContextSelector - 使用单个共享的 AsyncLoggerContext 使所有记录器异步。
#org.apache.logging.log4j.core.async .BasicAsyncLoggerContextSelector - makes all loggers asynchronous using a single shared AsyncLoggerContext.
#org.apache.logging.log4j.core.selector .ClassLoaderContextSelector - 为每个 Web 应用程序单独的 LoggerContexts。
#org.apache.logging.log4j.core.selector .ClassLoaderContextSelector - separate LoggerContexts for each web application.
#org.apache.logging.log4j.core.osgi .BundleContextSelector - 为每个 OSGi 包单独的 LoggerContexts。
#org.apache.logging.log4j.core.osgi .BundleContextSelector - separate LoggerContexts for each OSGi bundle.
#org.apache.logging.log4j.core.async .AsyncLoggerContextSelector - 使所有记录器异步。
#org.apache.logging.log4j.core.async .AsyncLoggerContextSelector - makes all loggers asynchronous.
#org.apache.logging.log4j.core.selector .BasicContextSelector - 创建一个共享的 LoggerContext。
#org.apache.logging.log4j.core.selector .BasicContextSelector - creates a single shared LoggerContext.
#org.apache.logging.log4j.core.selector .JndiContextSelector - 使用 JNDI 定位每个 Web 应用程序的 LoggerContext。
#org.apache.logging.log4j.core.selector .JndiContextSelector - use JNDI to locate each web application's LoggerContext.
#log4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector
